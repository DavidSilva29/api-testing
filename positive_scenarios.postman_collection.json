{
	"info": {
		"_postman_id": "f3f4b059-2485-4a2e-8236-29f64db812b1",
		"name": "Positive Scenarios",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Projects",
			"item": [
				{
					"name": "Create a new  project",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Content-Type header is present\", () => {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", () => {\r",
									"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Response is an object\", () => {\r",
									"    pm.expect(jsonData).to.be.an(\"object\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response body contains project_id\", () => {\r",
									"    pm.expect(jsonData.id).to.exist;\r",
									"});\r",
									"\r",
									"pm.environment.set(\"projectId\", jsonData.id);\r",
									"\r",
									"postman.setNextRequest(\"Get all projects\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "X-Requested-Id",
								"value": "$(uuidgen)",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{$randomDepartment}}\"\r\n}"
						},
						"url": {
							"raw": "{{projectsURL}}",
							"host": [
								"{{projectsURL}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all projects",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();",
									"",
									"pm.test(\"Content-Type header is present\", () => {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Content-Type header is application/json\", () => {",
									"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json');",
									"});",
									"",
									"pm.test(\"Response is an array\", () => {",
									"    pm.expect(jsonData).to.be.an(\"array\");",
									"});",
									"",
									"pm.test(`Projects number is ${jsonData.length}`, () => {",
									"});",
									"",
									"postman.setNextRequest(\"Get a project\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{projectsURL}}",
							"host": [
								"{{projectsURL}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get a project",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();",
									"",
									"pm.test(\"Content-Type header is present\", () => {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Content-Type header is application/json\", () => {",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
									"});",
									"",
									"pm.test(\"Response is an object\", () => {",
									"    pm.expect(jsonData).to.be.an(\"object\");",
									"});",
									"",
									"pm.test(`Project name is ${jsonData.name}`, () => {",
									"});",
									"",
									"postman.setNextRequest(\"Update a project\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{projectsURL}}/:projectId",
							"host": [
								"{{projectsURL}}"
							],
							"path": [
								":projectId"
							],
							"variable": [
								{
									"key": "projectId",
									"value": "{{projectId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update a project",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST request\", () => {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									"pm.test(\"Content-Type header is not present\", () => {",
									"    pm.response.to.not.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Response must not be in JSON\", () => {",
									"    pm.response.to.not.be.json",
									"});",
									"",
									"postman.setNextRequest(\"Create a new task\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"color\": 31\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{projectsURL}}/:projectId",
							"host": [
								"{{projectsURL}}"
							],
							"path": [
								":projectId"
							],
							"variable": [
								{
									"key": "projectId",
									"value": "{{projectId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete a project",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful DELETE request\", () => {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									"pm.test(\"Content-Type is not present\", () => {",
									"    pm.response.to.not.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Response must not be in JSON\", () => {",
									"    pm.response.to.not.be.json",
									"});",
									"",
									"pm.environment.unset(\"projectId\");",
									"",
									"postman.setNextRequest(null);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{projectsURL}}/:projectId",
							"host": [
								"{{projectsURL}}"
							],
							"path": [
								":projectId"
							],
							"variable": [
								{
									"key": "projectId",
									"value": "{{projectId}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Tasks",
			"item": [
				{
					"name": "Create a new task",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();",
									"",
									"pm.test(\"Content-Type header is present\", () => {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Response is an object\", () => {",
									"    pm.expect(jsonData).to.be.an(\"object\");",
									"});",
									"",
									"pm.test(\"Response body contains task_id\", () => {",
									"    pm.expect(jsonData.id).to.exist;",
									"});",
									"",
									"pm.environment.set(\"taskId\", jsonData.id);",
									"",
									"postman.setNextRequest(\"Get active tasks\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "X-Requested-Id",
								"value": "$(uuidgen)",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"content\": \"{{$randomPhrase}}\",\r\n    \"project_id\": {{projectId}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{tasksURL}}",
							"host": [
								"{{tasksURL}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get active tasks",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();",
									"",
									"pm.test(\"Content-Type header is present\", () => {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Content-Type header is application/json\", () => {",
									"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json');",
									"});",
									"",
									"pm.test(\"Response is an array\", () => {",
									"    pm.expect(jsonData).to.be.an(\"array\");",
									"});",
									"",
									"pm.test(`Tasks number is ${jsonData.length}`, () => {",
									"});",
									"",
									"postman.setNextRequest(\"Get an active task\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{tasksURL}}",
							"host": [
								"{{tasksURL}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get an active task",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();",
									"",
									"pm.test(\"Content-Type header is present\", () => {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Content-Type header is application/json\", () => {",
									"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json');",
									"});",
									"",
									"pm.test(\"Response is an object\", () => {",
									"    pm.expect(jsonData).to.be.an(\"object\");",
									"});",
									"",
									"postman.setNextRequest(\"Update a task\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{tasksURL}}/:taskId",
							"host": [
								"{{tasksURL}}"
							],
							"path": [
								":taskId"
							],
							"variable": [
								{
									"key": "taskId",
									"value": "{{taskId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update a task",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST request\", () => {\r",
									"    pm.response.to.have.status(204);\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is not present\", () => {\r",
									"    pm.response.to.not.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response must not be in JSON\", () => {\r",
									"    pm.response.to.not.be.json\r",
									"});\r",
									"\r",
									"postman.setNextRequest(\"Close a task\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "X-Requested-Id",
								"value": "$(uuidgen)",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"content\": \"{{$randomVerb}}\"\r\n}"
						},
						"url": {
							"raw": "{{tasksURL}}/:taskId",
							"host": [
								"{{tasksURL}}"
							],
							"path": [
								":taskId"
							],
							"variable": [
								{
									"key": "taskId",
									"value": "{{taskId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Close a task",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST request\", () => {\r",
									"    pm.response.to.have.status(204);\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is not present\", () => {\r",
									"    pm.response.to.not.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response must not be in JSON\", () => {\r",
									"    pm.response.to.not.be.json\r",
									"});\r",
									"\r",
									"postman.setNextRequest(\"Reopen a task\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{tasksURL}}/:taskId/close",
							"host": [
								"{{tasksURL}}"
							],
							"path": [
								":taskId",
								"close"
							],
							"variable": [
								{
									"key": "taskId",
									"value": "{{taskId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Reopen a task",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST request\", () => {\r",
									"    pm.response.to.have.status(204);\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is not present\", () => {\r",
									"    pm.response.to.not.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response must not be in JSON\", () => {\r",
									"    pm.response.to.not.be.json\r",
									"});\r",
									"\r",
									"postman.setNextRequest(\"Delete a task\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{tasksURL}}/:taskId/reopen",
							"host": [
								"{{tasksURL}}"
							],
							"path": [
								":taskId",
								"reopen"
							],
							"variable": [
								{
									"key": "taskId",
									"value": "{{taskId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete a task",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful DELETE request\", () => {\r",
									"    pm.response.to.have.status(204);\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type is not present\", () => {\r",
									"    pm.response.to.not.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response must not be in JSON\", () => {\r",
									"    pm.response.to.not.be.json\r",
									"});\r",
									"\r",
									"pm.environment.unset(\"taskId\");\r",
									"\r",
									"postman.setNextRequest(\"Delete a project\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{tasksURL}}/:taskId",
							"host": [
								"{{tasksURL}}"
							],
							"path": [
								":taskId"
							],
							"variable": [
								{
									"key": "taskId",
									"value": "{{taskId}}"
								}
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{token}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"pm.test(\"Status code is 2XX\", () => {",
					"    pm.response.to.be.success;",
					"});",
					"",
					"pm.test(\"Response time is less than 500ms\", () => {",
					"    pm.expect(pm.response.responseTime).to.be.below(500);",
					"});"
				]
			}
		}
	]
}